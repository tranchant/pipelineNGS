package cutadapt;

###################################################################################################################################
#
# Licencied under CeCill-C (http://www.cecill.info/licences/Licence_CeCILL-C_V1-en.html) and GPLv3
#
# Intellectual property belongs to IRD, CIRAD and SouthGreen developpement plateform 
# Written by Cécile Monat, Ayite Kougbeadjo, Mawusse Agbessi, Christine Tranchant, Marilyne Summo, Cédric Farcy, François Sabot
#
###################################################################################################################################


use strict;
use warnings;
use Data::Dumper;

use lib qw(.);
use localConfig;
use toolbox;

# Fonction to create the configuration file specific to cutadapt
sub createConfFile
{
    
    my ($fileAdaptator, $fileConf, $optionref)=@_;							# recovery of arguments
    
    open(CONF, ">", $fileConf) or die "Can't open $fileConf : $!";					# opening the configuration file to fill
    open(ADAPTATOR, "<", $fileAdaptator) or die "Opening file problem with $fileAdaptator : $!";	# opening the adaptators file
    while (my $seq=<ADAPTATOR>)
    {
	next if ($seq=~m/^$/);										# next if empty line
	chomp $seq;											# remove "\n" at the end of the line
        print CONF "-b $seq\n";										# print in the configuration file the "-b" parameter and the adaptators sequence cooresponding
        
        $seq = reverse $seq;										# do the reverse adaptators sequence
        $seq =~ tr/AaCcGgTt/TtGgCcAa/;									# do the complement adaptators sequence
        print CONF "-b $seq\n";										# print in the configuration file the "-b" parameter and the reverse adaptators sequence cooresponding
    }
    
    #print Data::Dumper::Dumper(\%$optionref);
    foreach my $option (keys %$optionref)								# for each options in the options hash
    {
        print CONF "$option $optionref->{$option}\n";							# print in the configuration file the parameter and the options cooresponding to
    }
    close CONF;
    close ADAPTATOR;
    
    if (toolbox::sizeFile($fileConf)){									# Check if the configuration file is not empty
	return 1
    }
    
}


# Fonction to execute the cutadapt 
sub execution
{

	die "WARNING! cutadapt::execution should get exactly three arguments!\n" if (@_ !=3 );		# Check if the number of arguments is good
   
	my ($fileIn,$fileConf,$fileOut) =@_;								# recovery of arguments
	#print Dumper($fileOut);

	## Lancement de cutadapt        
        #2 > cutadapt.log;
	
	##Just for trying############### A SUPPRIMER ????????? /!\ /!\ /!\
	open(ADAPT, "<", $fileConf) or die "Opening file problem with $fileConf :$!";
	my $adaptors=" ";
	while (<ADAPT>) {
	    chomp($_);
	    $adaptors=$adaptors.$_." ";
	}
	#print Dumper($adaptors);
	################################
	
	
        ##my $cmd_line=$cutadapt." \$(<".$fileConf.") $filein -o $fileOut";
	my $cmd_line=$cutadapt." ".$adaptors." ".$fileIn." -o ".$fileOut;				# command line to execute cutadapt
	toolbox::exportLog(": $cmd_line\n",1); 								# tool to export log informations
	toolbox::run($cmd_line);									# tool to execute the command line

}

1;


=head1 NOM

package I<cutadapt> 

=head1 SYNOPSIS

	use ngs::cutadapt;

	cutadapt::createConfFile($adaptatorFile,$cutadaptConf,$option_prog{'cutadapt'});;

=head1 DESCRIPTION

This module regroups all the fonctions linked to cutadapt software https://code.google.com/p/cutadapt


=head2 FONCTIONS

=over 4

=item createConfFile()

This fonction takes 3 required arguments in input : a file with the adaptators sequences, the name of the configuration file to be generated by this fonction and which will
be used by cutadapt, and a hash containing the options.
This fonction parse the adaptators sequences file, generate the reverse sequences and regroups all the sequences in the configuration file with the options passed with the
3rd argument.
Example : 
C<cutadapt::createConfFile($adaptatorFile,$cutadaptConf,$option_prog{'cutadapt'});>


=item exec()

This fonction takes 3 required arguments in input : sequence fastq file, configuration file generated by the previous fonction and the sequences without adaptators fastq file.
Argument not required : name of log file.
This fonction execute the cutadapt command and generate a cleaned sequences file (without adaptators and minimal size).
Example: 
C<cutadapt::exec($fqFile,$cutadaptConf,$fastqCutadapt, $logFile) ;> 	


=back

=head1 AUTEUR

Christine Tranchant-Dubreuil, UMR DIADE

L<http://bioinfo.mpl.ird.fr/>
